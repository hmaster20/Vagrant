# -*- mode: ruby -*-
# vi: set ft=ruby :
# ---------------------------------
# https://stackoverflow.com/questions/54251855/virtualbox-enable-nested-vtx-amd-v-greyed-out
# Before vagrant up, need run command to enable VT-X mode:
# cd C:\Program Files\Oracle\VirtualBox
# VBoxManage modifyvm <vm-name> --nested-hw-virt on
# ---------------------------------
BOX_BASE = "ubuntu/focal64"
ADMIN_LOGIN = "ubuntu"
ADMIN_PASS = "ubuntu"
# ---------------------------------
CPU_COUNT = "4"     # vCores 2 3 4
CPU_USAGE = "85"    # Percent usage 75 95
RAM_SIZE = "3072"   # 1024 2048 3072 4096
# ---------------------------------
MAC_ADDR = "080027ABC044"
IP_ADDR = "192.168.1.44"       #  Bridge
IP_LOCL = "192.168.50.44"      #  Internal
IP_HOST = "192.168.56.44"      #  Host-Only
# ---------------------------------
HOST_ADDR = "nexus.local"
VM_GROUP = "/local"
VM_DESCR = "Nexus 3 repository for Ubuntu 20.04 LTS Focal"
# ---------------------------------
# ---------------------------------

Vagrant.configure("2") do |config|

    # Базовый образ
    config.vm.box = BOX_BASE

    config.vm.define HOST_ADDR do |machine|

      machine.vm.hostname = HOST_ADDR
      machine.vm.provider "virtualbox" do |vbox|

      # https://developer.hashicorp.com/vagrant/docs/vagrantfile/machine_settings
      # Отключить проверку репозитория на наличие новых версий для текущего box-а
      machine.vm.box_check_update = false

        # Customize VM
        # https://www.virtualbox.org/manual/ch08.html
        vbox.customize ["modifyvm", :id, "--cpus", CPU_COUNT ]
        vbox.customize ["modifyvm", :id, "--cpuexecutioncap", CPU_USAGE ]
        vbox.customize ["modifyvm", :id, "--memory", RAM_SIZE ]
        vbox.customize ["modifyvm", :id, "--name", HOST_ADDR ]
        vbox.customize ["modifyvm", :id, "--groups", VM_GROUP ]
        vbox.customize ["modifyvm", :id, "--description", VM_DESCR ]

        # Отключить проверку гостевых дополнений
        vbox.check_guest_additions = false
        # # Отключить использование подключаемых каталогов
        # vbox.functional_vboxsf     = false

      end

      # ---------------------------------------------------------------------
      # WiFi (Static)
      # ==============
      # For check exist bridges:
      # "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" list bridgedifs
      # ==============
      machine.vm.network "public_network",
        # bridge: 'Intel(R) Dual Band Wireless-AC 7260',
        bridge: 'Intel(R) Wi-Fi 6E AX210 160MHz',
        ip: IP_ADDR,
        :ipv6 => false,
        :mac => MAC_ADDR

      # Internal network
      machine.vm.network "private_network",
        virtualbox__intnet: true,
        ip: IP_LOCL,
        :ipv6 => false

      # Private network
      machine.vm.network "private_network",
        name: "VirtualBox Host-Only Ethernet Adapter",
        ip: IP_HOST,
        :ipv6 => false
      # ---------------------------------------------------------------------

      # machine.vm.synced_folder ".", "/vagrant",  disabled: true
      # # https://www.vagrantup.com/docs/synced-folders/basic_usage
      # machine.vm.synced_folder "D:\\GitHub\\apps", "/application",
      #   disabled: false,
      #   # id: "ansible-project",
      #   # owner: ADMIN_LOGIN,
      #   # group: ADMIN_LOGIN,
      #   # mount_options: ["dmode=775,fmode=664"]
      #   mount_options: ["dmode=777,fmode=666"]

      # machine.vm.provision "shell", inline: "echo 'ubuntu:ubuntu' | sudo chpasswd"
      machine.vm.provision "shell" do |secure|
        secure.inline = "echo $1:$2 | chpasswd"
        secure.args   = [ADMIN_LOGIN, ADMIN_PASS]
      end

      # Enable remote access via password
      machine.vm.provision "shell", inline: <<-SHELL
      sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
      systemctl restart sshd.service
      SHELL

      # fix multipath daemon error
      machine.vm.provision "shell", path: "../../_shell/system/multipath_daemon.sh"

      # fix (disable) auto upgrades
      machine.vm.provision "shell", path: "../../_shell/system/disable_auto_upgrades.sh"

      # Install other tools
      machine.vm.provision "shell", path: "../../_shell/system/common_apt_u2004.sh"

      # Добавление подсветки Yaml в Nano
      config.vm.provision "shell", path: "../../_shell/soft/nanorc_yaml.sh"

      # Install Docker
      machine.vm.provision "shell", path: "../../_shell/soft/docker.sh"

      # Создание сети для Nexus 3
      machine.vm.provision "shell", inline: "docker network create \"nexus\""

      # View VM info
      machine.vm.provision "shell", path: "../../_shell/system/view_vm_info.sh", run: "always"

      # # Перезагрузка
      # machine.vm.provision :reload

    end

end

# get-process | where ProcessName -like *ruby*
# get-process | findstr ruby
# $procid=get-process ruby |select -expand id
# $procid=(get-process ruby).id
# stop-process $procid
# stop-process 11222
